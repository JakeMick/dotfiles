#! /usr/bin/bash

shopt -s checkwinsize

PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

if [ `id -un` = root ]; then
    PS1='\[\033[1;31m\]\h:\w\$\[\033[0m\] '
else
    PS1='\[\033[1;32m\]\h:\w\$\[\033[0m\] '
fi

xset b off
# stupid hack for 256 colors
export TERM=xterm-256color
#bash /srv/repos/gnome-terminal-colors-solarized/set_dark.sh
#export PATH="/srv/anaconda/bin:$PATH"
export PATH="/srv/haskell/bin:$PATH"
export PATH="~/.cabal/bin:$PATH"
#export PATH="/srv/repos/.cabal-sandbox/bin:$PATH"
export PATH="/var/lib/gems/1.8/bin:$PATH"
export PATH="/usr/local/cuda/bin:$PATH"

trap "rm ~/.bash_history" 0
#alias ipython='ipython --colors=Linux'
alias indie='mplayer -playlist /srv/somafm/poptron.pls'
alias folk='mplayer -playlist /srv/somafm/folkfwd.pls'
alias cliq='mplayer -playlist /srv/somafm/cliqhop.pls'
alias covers='mplayer -playlist /srv/somafm/covers.pls'
alias drone='mplayer -playlist /srv/somafm/dronezone.pls'
alias loud='pactl set-sink-volume 0 200%'

alias cls='clear'
alias clls='clear; ls'
alias ll='ls -l'
alias lsa='ls -altr'
alias lsg='ls | grep'
alias na='nano'
alias ls='ls --color'
alias k='kill -9'
alias backg='feh /srv/wall'
alias cdan='cd *'
alias ipy='nohup ipython qtconsole --pylab=inline  --colors=linux &'
alias rpyc='rm *.pyc'
alias t='vim /srv/repos/dotfiles/task.txt'
alias rh='runhaskell'
alias godhs='ghc -O2 -optc-O3 -fexcess-precision -optc-march=native'

alias exe='chmod +x'
alias addalias='vim ~/.bashrc'
#export OPENBLAS_NUM_THREADS=8
export PATH="/usr/local/cuda/bin:$PATH"
#export ATLAS=None
#export LAPACK=/usr/lib/openblas-base/libopenblas.a
#export BLAS=/usr/lib/openblas-base/libopenblas.a
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/lib

alias ghc-sandbox="ghc -no-user-package-db -package-db .cabal-sandbox/*-packages.conf.d"
alias ghci-sandbox="ghci -no-user-package-db -package-db .cabal-sandbox/*-packages.conf.d"
alias runhaskell-sandbox="runhaskell -no-user-package-db -package-db .cabal-sandbox/*-packages.conf.d"

function ghcs {
local DIR=$PWD
local TARGET="cabal.sandbox.config"
while [ ! -e $DIR/$TARGET -a $DIR != "/" ]; do
    DIR=$(dirname $DIR)
done
if test $DIR != "/"; then
    local DB=$(sed -ne '/^package-db: */{s///p;q;}' "$DIR/$TARGET")
    ghc -no-user-package-db -package-db="$DB" "$@"
else
    ghc "$@"
fi
}

function internets {
unsafety_vpn
safety_vpn

}
function internets_down {
nmcli con down id ATT304
nmcli con down id "PIA - US East"
}

function internets_up {
nmcli con up id ATT304
nmcli con up id "PIA - US East"

}

function unsafety_vpn {
sudo iptables -F
sudo iptables -X
sudo iptables -P OUTPUT ACCEPT
sudo iptables -P INPUT ACCEPT
sudo iptables -P FORWARD ACCEPT

}

function safety_vpn {
VPN=10.151.1.6
LAN=192.168.1.0/24

# Delete all existing rules
sudo iptables -F
sudo iptables -X

# Disallow everything
sudo iptables -P OUTPUT DROP
sudo iptables -P INPUT DROP
sudo iptables -P FORWARD DROP

#Allow input from LAN and tun0 ONLY
sudo iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A INPUT -i lo -j ACCEPT
sudo iptables -A INPUT -i tun0 -m conntrack --ctstate NEW -j ACCEPT
sudo iptables -A INPUT -s $LAN -m conntrack --ctstate NEW -j ACCEPT
sudo iptables -A INPUT -j DROP

#Allow output from lo and tun0 ONLY
sudo iptables -A OUTPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A OUTPUT -o lo -j ACCEPT
sudo iptables -A OUTPUT -o tun0 -m conntrack --ctstate NEW -j ACCEPT
sudo iptables -A OUTPUT -d $VPN -m conntrack --ctstate NEW -j ACCEPT
sudo iptables -A OUTPUT -j DROP

# Allow from local network
sudo iptables -A OUTPUT -d $LAN -j ACCEPT
sudo iptables -A OUTPUT -s $LAN -j ACCEPT

# Allow OpenVPN
sudo iptables -A OUTPUT -p gre -j ACCEPT
sudo iptables -A OUTPUT -p tcp --dport 1723 -j ACCEPT

}

